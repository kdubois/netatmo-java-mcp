# Netatmo API Configuration
netatmo.api.base.url=https://api.netatmo.com
netatmo.api.client-id=NETATMO_CLIENT_ID
netatmo.api.client-secret=NETATMO_CLIENT_SECRET
netatmo.api.refresh-token=XYZ

# REST Client Configuration
quarkus.rest-client.netatmo-api.url=${netatmo.api.base.url}
quarkus.rest-client.netatmo-api.scope=jakarta.inject.Singleton

# use Mandrel container to build native binary (set to false if you have GraalVM installed)
quarkus.native.container-build=true

%dev.quarkus.http.port=8081

quarkus.container-image.name=netatmo
quarkus.container-image.tag=latest
quarkus.container-image.registry=quay.io
quarkus.container-image.group=kevindubois

# kubectl create secret generic netatmo --from-env-file=./.env
%prod.quarkus.kubernetes-config.secrets.enabled=true
%prod.quarkus.kubernetes-config.secrets=netatmo
%prod.quarkus.kubernetes.env.secrets=netatmo
# Allows you to build linux amd64 image if you're running on an apple silicon machine
quarkus.podman.platform=linux/amd64

# Deploy as serverless workload
quarkus.kubernetes.deployment-target=knative
quarkus.knative.image-pull-policy=IfNotPresent
quarkus.knative.readiness-probe.period=1s
quarkus.knative.scale-to-zero-enabled=true
quarkus.knative.name=netatmo

# limits
quarkus.kubernetes.resources.limits.cpu=2
quarkus.kubernetes.resources.limits.memory=400Mi

# requests
quarkus.kubernetes.resources.requests.cpu=200m
quarkus.kubernetes.resources.requests.memory=200Mi

# env variables
quarkus.kubernetes.env.vars.JDK_JAVA_OPTIONS.value=-XX:+UseParallelGC -XX:MaxRAMPercentage=75
